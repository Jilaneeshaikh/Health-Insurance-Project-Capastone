# -*- coding: utf-8 -*-
"""Health Insurance Analysis .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19lJPoAWHephnPFMT1b85Wo7FOqFjVuMB
"""

# Commented out IPython magic to ensure Python compatibility.
# Import libraries
import numpy as np
import pandas as pd
import seaborn as sns
from scipy import stats
import matplotlib.pyplot as plt
import matplotlib.transforms as mtransforms
import os

from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression

# For Jupyter Notebook plotting
# %matplotlib inline

"""# import datasets"""

Hosp_d=pd.read_csv('Hospitalisation details.csv')
Med_d=pd.read_csv('Medical Examinations.csv')
name_d=pd.read_excel('Names.xlsx')

"""**Hospital Data**"""

print("Hospital_Data")
print(Hosp_d.head(12))
print("Medical_Data")
print(Med_d.head(12))
print("Name_Data")
print(name_d.head(12))

Hosp_d.describe()

Med_d.describe()

Hosp_d.info()
Hosp_d.shape

Med_d.info()
Med_d.shape

name_d.info()
name_d.shape

# print("Hospital Data", Hosp_d.info)
# print("Medical_Data",Med_d.shape)
# print("Name_Data",name_d.shape)
Hosp_d.info()

"""## **Merge Data:** Merge All data by Customer ID"""

Name_Hosp_d=pd.merge(name_d, Hosp_d,on='Customer ID')
Name_Hosp_d.head(2)

df=pd.merge(Name_Hosp_d, Med_d,on='Customer ID')
df.head()

df.info()
df.shape

df[df.eq('?').any(axis=1)]

len(df[df.eq('?').any(axis=1)])/len(df)*100

"""**Missing value Handling:** Since value is only 0.43% so we can drop it instead of filling"""

df.replace("?", np.nan, inplace=True)

"""**Categorical Transformations**

Convert Hospital tier, City tier into ordinal/numeric.

Convert Yes/No into 1/0.
"""

df['Hospital tier'] = df['Hospital tier'].map({'tier - 1':1, 'tier - 2':2, 'tier - 3':3})
df['City tier'] = df['City tier'].map({'tier - 1':1, 'tier - 2':2, 'tier - 3':3})
df.replace({'yes':1, 'No':0}, inplace=True)

"""State ID Dummies (only R1011, R1012, R1013)"""

df['State_dummy'] = df['State ID'].apply(lambda x: x if x in ['R1011','R1012','R1013'] else 'Other')
df = pd.get_dummies(df, columns=['State_dummy'], drop_first=True)

"""**Clean Number Of Major Surgeries**

Convert "No major surgery" to 0 (int).
"""

df['NumberOfMajorSurgeries'] = df['NumberOfMajorSurgeries'].replace("No major surgery", 0).astype(int)

"""**Age Calculation**"""

import datetime
current_year = datetime.datetime.now().year
df['Age'] = current_year - df['year'].astype(float)

"""# **Gender from Name**

Detect from salutations (Mr. = Male, Ms./Mrs. = Female
"""

df['Gender'] = df['name'].apply(lambda x: 'Male' if 'Mr.' in x else 'Female')

"""# **Cost Distribution Visualizations**"""

import seaborn as sns
import matplotlib.pyplot as plt

sns.histplot(df['charges'], bins=30)
plt.show()

sns.boxplot(x=df['charges'])
plt.show()

sns.swarmplot(x="Gender", y="charges", data=df)
plt.show()

"""**Distribution across Gender & Hospital Tiers**"""

sns.boxplot(x="Gender", y="charges", data=df)
sns.boxplot(x="Hospital tier", y="charges", data=df)

"""# **Radar Chart (Median Cost by Hospital Tier)**"""

# import matplotlib.pyplot as plt
# import numpy as np

median_costs = df.groupby('Hospital tier')['charges'].median()
labels = median_costs.index.astype(str)
values = median_costs.values

angles = np.linspace(0, 2*np.pi, len(labels), endpoint=False).tolist()
values = np.concatenate((values,[values[0]]))
angles = np.concatenate((angles,[angles[0]]))

plt.polar(angles, values)
plt.fill(angles, values, alpha=0.25)
plt.xticks(angles[:-1], labels)
plt.show()

"""# **Frequency Table & Stacked Bar Chart**"""

freq_table = pd.crosstab(df['City tier'], df['Hospital tier'])
print(freq_table)

freq_table.plot(kind="bar", stacked=True)
plt.show()

"""# **Hypothesis Testing**
**Using t-test / ANOVA / Chi-square:**
"""

from scipy import stats

# a. Hospital tiers vs charges (ANOVA)
stats.f_oneway(*(df[df['Hospital tier']==t]['charges'] for t in df['Hospital tier'].unique()))

# b. City tiers vs charges
stats.f_oneway(*(df[df['City tier']==t]['charges'] for t in df['City tier'].unique()))

# c. Smokers vs Non-smokers
stats.ttest_ind(df[df['smoker']==1]['charges'], df[df['smoker']==0]['charges'])

# d. Smoking vs Heart Issues (Chi-square independence test)
contingency = pd.crosstab(df['smoker'], df['Heart Issues'])
stats.chi2_contingency(contingency)

from scipy import stats
import pandas as pd

# a. Hospital tiers vs charges (ANOVA)
anova_hospital = stats.f_oneway(*(df[df['Hospital tier']==t]['charges'] for t in df['Hospital tier'].unique()))

# b. City tiers vs charges (ANOVA)
anova_city = stats.f_oneway(*(df[df['City tier']==t]['charges'] for t in df['City tier'].unique()))

# c. Smokers vs Non-smokers (t-test)
ttest_smoker = stats.ttest_ind(df[df['smoker']==1]['charges'], df[df['smoker']==0]['charges'])

# d. Smoking vs Heart Issues (Chi-square)
contingency = pd.crosstab(df['smoker'], df['Heart Issues'])
chi2_test = stats.chi2_contingency(contingency)

# ---- Print outputs neatly ----
print("\n=== Hypothesis Test Results ===\n")

print("a) Hospital tiers vs charges (ANOVA):")
print(anova_hospital, "\n")

print("b) City tiers vs charges (ANOVA):")
print(anova_city, "\n")

print("c) Smokers vs Non-smokers (t-test):")
print(ttest_smoker, "\n")

print("d) Smoking vs Heart Issues (Chi-square):")
print("Chi2:", chi2_test[0], " | p-value:", chi2_test[1], " | dof:", chi2_test[2])
print("Expected frequencies:\n", chi2_test[3], "\n")